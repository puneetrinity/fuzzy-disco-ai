#!/usr/bin/env node

// Test Railway API functionality
import fetch from 'node-fetch';

const RAILWAY_API = 'https://fuzzy-disco-ai-production.up.railway.app';

async function testRailwayAPI() {
  console.log('üöÄ Testing Railway API Functionality\n');

  try {
    // Test 1: Health check
    console.log('1. üè• Health Check');
    const health = await fetch(`${RAILWAY_API}/health`);
    const healthData = await health.json();
    console.log(`   Status: ${healthData.status}`);
    console.log(`   Timestamp: ${healthData.timestamp}\n`);

    // Test 2: Select Practitioner Style
    console.log('2. üéØ Select Practitioner Style for Feature Development');
    const styleMessage = {
      jsonrpc: "2.0",
      id: 1,
      method: "tools/call",
      params: {
        name: "select_practitioner_style",
        arguments: {
          taskType: "feature",
          context: "Building a user authentication system",
          teamSize: 3
        }
      }
    };

    const styleResponse = await fetch(`${RAILWAY_API}/message`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(styleMessage)
    });

    const styleResult = await styleResponse.json();
    const styleContent = JSON.parse(styleResult.result.content[0].text);
    console.log(`   Recommended: ${styleContent.recommendation.practitioner}`);
    console.log(`   Reasoning: ${styleContent.recommendation.reasoning}`);
    console.log(`   Principles: ${styleContent.recommendation.principles.join(', ')}\n`);

    // Test 3: Generate Code
    console.log('3. ‚ö° Generate Code with Uncle Bob Style');
    const codeMessage = {
      jsonrpc: "2.0",
      id: 2,
      method: "tools/call",
      params: {
        name: "generate_code_with_style",
        arguments: {
          practitioner: "uncle-bob",
          codeType: "UserService",
          requirements: "authenticate user with email and password",
          language: "typescript"
        }
      }
    };

    const codeResponse = await fetch(`${RAILWAY_API}/message`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(codeMessage)
    });

    const codeResult = await codeResponse.json();
    const codeContent = JSON.parse(codeResult.result.content[0].text);
    console.log(`   Generated by: ${codeContent.practitioner}`);
    console.log(`   Code Type: ${codeContent.codeType}`);
    console.log(`   Principles: ${codeContent.principles.join(', ')}`);
    console.log(`   Code Preview: ${codeContent.generatedCode.substring(0, 200)}...\n`);

    // Test 4: Team Coordination
    console.log('4. üë• Team Workflow Coordination');
    const teamMessage = {
      jsonrpc: "2.0",
      id: 3,
      method: "tools/call",
      params: {
        name: "coordinate_team_workflow",
        arguments: {
          workflow: "feature-development",
          teamMembers: ["Alice", "Bob", "Charlie"],
          priority: "high"
        }
      }
    };

    const teamResponse = await fetch(`${RAILWAY_API}/message`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(teamMessage)
    });

    const teamResult = await teamResponse.json();
    const teamContent = JSON.parse(teamResult.result.content[0].text);
    console.log(`   Workflow: ${teamContent.workflow}`);
    console.log(`   Priority: ${teamContent.priority}`);
    console.log(`   Team Size: ${teamContent.team.size}`);
    console.log(`   Phases: ${teamContent.coordination.phases.join(' ‚Üí ')}\n`);

    // Test 5: Code Analysis
    console.log('5. üîç Code Quality Analysis');
    const sampleCode = `
function calculateTotal(items) {
  let total = 0;
  for (let i = 0; i < items.length; i++) {
    total += items[i].price * items[i].quantity;
  }
  return total;
}
`;

    const analysisMessage = {
      jsonrpc: "2.0",
      id: 4,
      method: "tools/call",
      params: {
        name: "analyze_code_quality",
        arguments: {
          code: sampleCode,
          language: "javascript",
          focusAreas: ["clean-code", "maintainability"]
        }
      }
    };

    const analysisResponse = await fetch(`${RAILWAY_API}/message`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(analysisMessage)
    });

    const analysisResult = await analysisResponse.json();
    const analysisContent = JSON.parse(analysisResult.result.content[0].text);
    console.log(`   Quality Score: ${analysisContent.overallScore}/100`);
    console.log(`   Lines: ${analysisContent.metrics.lines}`);
    console.log(`   Functions: ${analysisContent.metrics.functions}`);
    console.log(`   Recommendations: ${analysisContent.recommendations.slice(0, 2).join(', ')}\n`);

    console.log('üéâ All Railway API tests completed successfully!');
    console.log('üí° The Railway server is fully functional and ready for use.');

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

// Run the tests
testRailwayAPI();